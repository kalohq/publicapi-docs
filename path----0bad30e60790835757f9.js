webpackJsonp([60335399758886],{143:function(n,s){n.exports={data:{allMarkdownRemark:{edges:[{node:{id:"src/pages/index.md absPath of file >>> MarkdownRemark",html:'<p>At Kalo we aim to be the source of truth for all of your company’s information about freelancers, and make interactions with them seamless. We know that your team may be using other project management tools, and as such, we want to make it as easy as possible to use Kalo with these 3rd party tools, minimising the amount of duplicate work. </p>\n<p>The Kalo API is a way to build integration between Kalo and any other system or applications you are using to onboard, manage, and pay your freelancers.</p>\n<p>To start, you’ll need to create a Kalo app (“Kalo app” is a link to the kalo app management page).</p>\n<p>Head over to the <a href="./overview">API Overview</a> page for more details on the resources you can access via the Kalo API.</p>',fields:{slug:"/"},frontmatter:{title:"Getting started"}}},{node:{id:"src/pages/overview.md absPath of file >>> MarkdownRemark",html:'<h2>Kalo API</h2>\n<p>The base URL of the Kalo API is <code>https://api.kalohq.com/</code>, and exposes projects, tasks, invoices and freelancers at:</p>\n<ul>\n<li><a href="https://api.kalohq.com/projects/">https://api.kalohq.com/projects/</a></li>\n<li><a href="https://api.kalohq.com/tasks/">https://api.kalohq.com/tasks/</a></li>\n<li><a href="https://api.kalohq.com/freelancers/">https://api.kalohq.com/freelancers/</a></li>\n<li><a href="https://api.kalohq.com/invoices/">https://api.kalohq.com/invoices/</a></li>\n</ul>\n<h2>Creating Kalo Apps</h2>\n<p>In order to use the Kalo API, you’ll first need to create a Kalo app, going to the <a href="https://developers.kalohq.com/apps/create">kalo app management page</a>.\nYou can think of a Kalo app as an integration point binto the Kalo platform.</p>\n<p>A Kalo app allows you to define one or more Kalo app keys.\nKalo apps and kalo apps keys can only be created by admin users, and keys will have admin rights on the team resources, so they should not be shared with others.</p>\n<h2>REST API</h2>\n<p>The Kalo API is a RESTful json API, and follows <a href="http://jsonapi.org">the json api specification</a>.\nEach request needs to be authenticated using the authentication key previously generated, using the <code>X-Kalo-Api-Key</code> authentication header, which would look like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>X-Kalo-Api-Key: ea4fa026c1874a4fb40d1c4880d97bb4</code></pre>\n      </div>\n<p>For write http requests you also need to pass the content type, so in that case the header would look like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>X-Kalo-Api-Key: ea4fa026c1874a4fb40d1c4880d97bb4\nContent-Type: application/json</code></pre>\n      </div>\n<p>The general status codes you can expect from the API are the following:</p>\n<ul>\n<li>\n<p><strong>200: ok</strong></p>\n<p>The request was successful.\n<em>PATCH</em> and <em>GET</em> requests will return 200 on success, with information about the fetched/patched\nobjects in the response body.</p>\n</li>\n<li>\n<p><strong>201: created</strong></p>\n<p>Resource successfully created, only POST <em>requests</em> will return this status code.</p>\n</li>\n<li>\n<p><strong>400: bad request</strong></p>\n<p>Something wrong with the data passed in, for example missing required fields, mismatching\nfield types and other similar issues. The response body in this case should help detecting\nwhat the issue is.</p>\n</li>\n<li>\n<p><strong>401: unauthorized</strong></p>\n<p>Most likely a wrong authentication key.</p>\n</li>\n<li>\n<p><strong>403: forbidden</strong></p>\n<p>The authentication succeeded but you are trying to access data you are not allowed to access\nwith that key.</p>\n</li>\n<li>\n<p><strong>404: not found</strong></p>\n<p>The page does not exists or some of the resources that were trying to be accessed during\nthe request do not exist in the database.</p>\n<!-- in theory this could also happen when you access something you do not have access -->\n<!-- to given how the filtering works. For example filtering by team and a certain id -->\n<!-- even if the given object would exist with that id if it\'s not part of that team -->\n<!-- we will still return 404 -->\n</li>\n<li>\n<p><strong>500: server error</strong></p>\n<p>Most likely a bug in the Kalo API code, or something wrong in the request which should\nactually return a 400 but it\'s not handled correctly.\nThese gets all logged to our tracking system and we will have enough context to be\nable to reproduce the problem.</p>\n<!-- Should we add something else here about 502/503 or that\'s not really necessary? -->\n</li>\n</ul>\n<h2>Request types</h2>\n<p>Allowed requests to the API can be split into these categories:</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>Method</th>\n<th>Operation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/$resource/$id/</code></td>\n<td><code>GET</code></td>\n<td>Fetch a single resource</td>\n</tr>\n<tr>\n<td><code>/$resource/</code></td>\n<td><code>GET</code></td>\n<td>Fetch all the resources (paginating the result)</td>\n</tr>\n<tr>\n<td><code>/$resource/$id/</code></td>\n<td><code>PATCH</code></td>\n<td>Modify an existing resource</td>\n</tr>\n<tr>\n<td><code>/$resource/</code></td>\n<td><code>POST</code></td>\n<td>Create a new resource</td>\n</tr>\n</tbody>\n</table>\n<h2>Pagination</h2>\n<p>All the requests of the type <code>GET /$resource/</code> are <strong>paginated</strong>,\nwhich is a standard practice to avoid fetching too much data all at\nonce.</p>\n<p>The current limit of resources fetched per call is currently <code>30</code>,\nso it means that for example to fetch 100 resources you need to do\n4 API calls, returning in order <code>30 + 30 + 30 + 10 == 100</code> resources.</p>\n<p>Pagination is controlled by passing two query arguments:</p>\n<ul>\n<li><code>page[offset]</code>: which indicates how many resources to skip</li>\n<li><code>page[limit]</code>:  which indicates the number of resources to get (max 30 as\nmentioned above)</li>\n</ul>\n<p>To see an example, assume we have 100 projects and we need to get all\nof them, the API calls will be something like:</p>\n<ol>\n<li><code>GET /projects/</code> => resources 0-30</li>\n<li><code>GET /projects/?page[offset]=30</code> => resources 30-60</li>\n<li><code>GET /projects/?page[offset]=60</code> => resources 60-90</li>\n<li><code>GET /projects/?page[offset]=90</code> => resources 90-100</li>\n</ol>\n<p>To help the client understanding when all the resources are fetched\neach API response you will find two attributes <code>total</code> and <code>offset</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>{\'meta\': {\'total\': #tot-number-of-resources, \'offset\': #offset-used}}</code></pre>\n      </div>\n<p>With this information an easy way to fetch all the available resources would be:</p>\n<ul>\n<li>keep track of the total from the first call.</li>\n<li>keep track of the number of resources already fetched.</li>\n<li>when the number of resources fetched <code>==</code> total, then all resources\nwere fetched correctly.</li>\n</ul>',fields:{slug:"/overview/"},frontmatter:{title:"Overview"}}},{node:{id:"src/pages/resources/invoices.md absPath of file >>> MarkdownRemark",html:"<h1>Fields</h1>\n<p>Invoices are created either automatically or on-demand as a result of a freelancer completing a task. The Invoice resource currently exposes the following fields:</p>\n<ul>\n<li>id</li>\n<li>amount</li>\n<li>currency</li>\n<li>status</li>\n<li>reference</li>\n<li>vat</li>\n<li>created_at</li>\n<li>team</li>\n<li>freelancer</li>\n<li>task</li>\n</ul>\n<h1>Endpoints</h1>\n<h2>GET /invoices/</h2>\n<p>List all the available invoices.</p>",fields:{slug:"/resources/invoices/"},frontmatter:{title:"Invoices"}}},{node:{id:"src/pages/resources/freelancers.md absPath of file >>> MarkdownRemark",html:"<h1>Fields</h1>\n<p>Freelancers are the individual who work on the tasks defined in a project.\nFreelancer resources currently expose the following fields:</p>\n<ul>\n<li>id</li>\n<li>name</li>\n<li>email</li>\n<li>telephone</li>\n<li>country</li>\n<li>city</li>\n<li>area code</li>\n<li>currency</li>\n<li>next_available</li>\n<li>custom_data</li>\n<li>daily_rate</li>\n<li>hourly_rate</li>\n<li>instagram</li>\n<li>linkedin</li>\n<li>twitter</li>\n<li>website</li>\n<li>youtube</li>\n</ul>\n<p>The value of custom_data varries as a result of the set of onboarding templates assigned to the specific freelancer. The data will be returned as a collection of keys / values grouped by template name.</p>\n<h1>Endpoints</h1>\n<h2>GET /freelancers/</h2>\n<p>List all the available freelancers for the given team. The result is a paginated list of freelancers.</p>\n<h2>GET /freelancers/&#x3C;uuid:id>/</h2>\n<p>Retrienve a freelancer given the corresponding ID.</p>",fields:{slug:"/resources/freelancers/"},frontmatter:{title:"Freelancers"}}},{node:{id:"src/pages/resources/projects.md absPath of file >>> MarkdownRemark",html:'<h2>Fields</h2>\n<p>Projects allow you to group your team’s work.\nProject resources currently expose the following fields:</p>\n<ul>\n<li>id</li>\n<li>title</li>\n<li>description</li>\n<li>start_date</li>\n<li>end_date</li>\n<li>workgroup</li>\n</ul>\n<h2>Endpoint</h2>\n<h3>GET /projects/</h3>\n<p>Get all projects.</p>\n<h3>GET /projects/&#x3C;uuid:id>/</h3>\n<p>Get a single project by ID.</p>\n<h3>GET /projects/&#x3C;uuid:id>/tasks/</h3>\n<p>List all the available tasks for a specific project</p>\n<h3>GET /projects/&#x3C;uuid:id>/tasks/&#x3C;uuid:id>/</h3>\n<p>Get a single task by ID for a specific project</p>\n<h3>POST /projects/</h3>\n<p>Creates a new project, as shown in this example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"project"</span><span class="token punctuation">,</span>\n    <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Project title"</span><span class="token punctuation">,</span>\n      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Project description"</span><span class="token punctuation">,</span>\n      <span class="token property">"start_date"</span><span class="token operator">:</span> <span class="token string">"2017-08-14"</span><span class="token punctuation">,</span>\n      <span class="token property">"end_date"</span><span class="token operator">:</span> <span class="token string">"2017-08-20"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>If you want to create a new project inside a certain workgroup you need to pass the right workgroup_id, for example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"project"</span><span class="token punctuation">,</span>\n    <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Project with workgroup"</span><span class="token punctuation">,</span>\n      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Project with workgroup"</span><span class="token punctuation">,</span>\n      <span class="token property">"start_date"</span><span class="token operator">:</span> <span class="token string">"2017-08-14"</span><span class="token punctuation">,</span>\n      <span class="token property">"end_date"</span><span class="token operator">:</span> <span class="token string">"2017-08-20"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"relationships"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"workgroup"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"workgroup"</span><span class="token punctuation">,</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>',fields:{slug:"/resources/projects/"},frontmatter:{title:"Projects"}}},{node:{id:"src/pages/resources/tasks.md absPath of file >>> MarkdownRemark",html:'<h2>Fields</h2>\n<p>Tasks are individual units of work that belong to projects, and are assigned to freelancers.</p>\n<p>Task resources currently expose the following fields:</p>\n<ul>\n<li>id</li>\n<li>freelancer</li>\n<li>managers</li>\n<li>summary</li>\n<li>description</li>\n<li>rate</li>\n<li>rate_type (one of "fixed", "daily", "hourly")</li>\n<li>status (one of "ongoing", "completed")</li>\n<li>project</li>\n</ul>\n<h2>Endpoints</h2>\n<h3>GET /tasks/</h3>\n<p>List all the available tasks.</p>\n<h3>GET /tasks/&#x3C;uuid:id>/</h3>\n<p>Fetch a task given by its UUID.</p>\n<h3>POST /tasks/</h3>\n<p>Creates a new task, see this example request, where you have to\nreplace the right <code>project uuid</code> and the right <code>manager id</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"task"</span><span class="token punctuation">,</span>\n    <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Sample task created"</span><span class="token punctuation">,</span>\n      <span class="token property">"summary"</span><span class="token operator">:</span> <span class="token string">"Sample task"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"relationships"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"project"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"project"</span><span class="token punctuation">,</span>\n          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"608172ce-27ab-4dfe-82d9-9bd6e28c2366"</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"managers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>\n            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">100</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>PATCH /tasks/&#x3C;uuid:id>/</h3>\n<p>Modify a task sending partial information about the fields to change.</p>\n<p>This is used for both:</p>\n<ul>\n<li>\n<p>change task attributes</p>\n</li>\n<li>\n<p>change the task state, where the supported possible states are (at the moment)</p>\n<ul>\n<li>ONGOING</li>\n<li>COMPLETED</li>\n</ul>\n</li>\n</ul>\n<p>So for example suppose we have a task which is currently pending, and\nwe want to make it switch to ongoing, we just have to patch the task\npassig the new status we want.</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code>    <span class="token punctuation">{</span>\n        <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"task"</span><span class="token punctuation">,</span>\n            <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"ongoing"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>If instead we want to change some attributes (like summary for\nexample) we will still use <code>patch</code> in the same way but passing the\nattribute we want to change with the right value in.</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code>    <span class="token punctuation">{</span>\n        <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"task"</span><span class="token punctuation">,</span>\n            <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">"summary"</span><span class="token operator">:</span> <span class="token string">"New summary"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>These two changes can also be merged of course (so changing state and\nsome attributes at the same time).</p>',fields:{slug:"/resources/tasks/"},frontmatter:{title:"Tasks"}}}]}},layoutContext:{}}}});
//# sourceMappingURL=path----0bad30e60790835757f9.js.map